{
  "uid" : "bc339196f8204f8a",
  "name" : "test_tags",
  "fullName" : "testproject.pytests.test_tag#test_tags",
  "historyId" : "4b055eb5b7b54dd8f9a0dcd472c2b90a",
  "time" : {
    "start" : 1630939401356,
    "stop" : 1630939437277,
    "duration" : 35921
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=92.0.4515.159)",
  "statusTrace" : "def test_tags():\n        url = \"http://localhost:1667\"\n        driver.get(url)\n        time.sleep(2)\n    \n        # successful registration\n        random_user = f\"Buddie{randint(1, 100)}\"\n        reg_input_data = [random_user, f\"{random_user}@gmail.com\", \"12ABab@&\"]\n    \n        locator(registration_xp).click()\n        fill_input_fields_and_send(reg_input_data, locators(reg_input_fields_xp), locator(sign_up_btn_xp))\n        locator(notice_btn_xp).click()\n        time.sleep(2)\n    \n        # create new blog_post\n        locator(new_article_xp).click()\n        time.sleep(3)\n    \n        # create some blog post (read data_list in file and fill blog input fields & write tags in list)\n        tags_list = []\n        with open(\"new_blogs.csv\", \"r\", encoding=\"utf-8\") as csv_file:\n            reader = csv.reader(csv_file, delimiter=\"|\")\n            next(reader)\n            for row in reader:\n                locator(new_article_xp).click()\n                time.sleep(3)\n                find_and_clear_by_xp(article_title_xp).send_keys(row[0])\n                find_and_clear_by_xp(article_desc_xp).send_keys(row[1])\n                find_and_clear_by_xp(text_area_xp).send_keys(row[2])\n                find_and_clear_by_xp(tag_xp).send_keys(f'{row[3]},{row[4]}')\n                tags_list.append(row[3])\n                tags_list.append(row[4])\n                locator(publish_btn_xp).click()\n                time.sleep(3)\n    \n        # check tags in My Articles\n        blog_summer_tags_xp = '//a[@href=\"#/articles/summer\"]//div[@class=\"tag-list\"]/a'\n        blog_spring_tags_xp = '//a[@href=\"#/articles/spring\"]//div[@class=\"tag-list\"]/a'\n        blog_winter_tags_xp = '//a[@href=\"#/articles/winter\"]//div[@class=\"tag-list\"]/a'\n        blog_autumn_tags_xp = '//a[@href=\"#/articles/autumn\"]//div[@class=\"tag-list\"]/a'\n    \n        user_name_in_nav = reg_input_data[0]\n        user_name_nav_xp = f'//nav//li/a[contains(text(), \"{user_name_in_nav}\")]'\n        locator(user_name_nav_xp).click()\n    \n        # tags of blogs\n        def create_blog_tags_list(elements, tag_list):\n            for _ in elements:\n                tag_list.append(_.text)\n    \n        # summer blog\n        blog_summer_tags = locators(blog_summer_tags_xp)\n        blog_summer_tags_text = []\n        create_blog_tags_list(blog_summer_tags, blog_summer_tags_text)\n        assert blog_summer_tags_text == tags_list[:2]\n    \n        # spring blog\n        blog_spring_tags = locators(blog_spring_tags_xp)\n        blog_spring_tags_text = []\n>       create_blog_tags_list(blog_spring_tags, blog_spring_tags_text)\n\ntestproject/pytests/test_tag.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestproject/pytests/test_tag.py:104: in create_blog_tags_list\n    tag_list.append(_.text)\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f680920f550>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#19 0x557db877ee58 \\\\u003Cunknown>\\\\n#20 0x557db8798dfd \\\\u003Cunknown>\\\\n#21 0x7f3826043609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=92.0.4515.159)\n\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testproject.pytests"
  }, {
    "name" : "suite",
    "value" : "test_tag"
  }, {
    "name" : "host",
    "value" : "fv-az77-409"
  }, {
    "name" : "thread",
    "value" : "3778-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testproject.pytests.test_tag"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "cbb158407a2616fc",
        "reportUrl" : "https://Bebe-ops.github.io/conduit/33//#testresult/cbb158407a2616fc",
        "status" : "passed",
        "time" : {
          "start" : 1629211921602,
          "stop" : 1629211961147,
          "duration" : 39545
        }
      }, {
        "uid" : "30d5de41d303c3b8",
        "reportUrl" : "https://Bebe-ops.github.io/conduit/31//#testresult/30d5de41d303c3b8",
        "status" : "passed",
        "time" : {
          "start" : 1627997192982,
          "stop" : 1627997232136,
          "duration" : 39154
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "bc339196f8204f8a.json",
  "parameterValues" : [ ]
}