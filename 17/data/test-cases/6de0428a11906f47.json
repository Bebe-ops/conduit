{
  "uid" : "6de0428a11906f47",
  "name" : "test_mod_and_del_blog",
  "fullName" : "testproject.pytests.blog_post_test#test_mod_and_del_blog",
  "historyId" : "455db46209fcf3d81278e9ae478aa4c4",
  "time" : {
    "start" : 1627056386517,
    "stop" : 1627056436122,
    "duration" : 49605
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=91.0.4472.164)",
  "statusTrace" : "def test_mod_and_del_blog():\n        url = \"http://localhost:1667\"\n        driver.get(url)\n        time.sleep(5)\n    \n        # login\n        find_elem_and_click('//*[@id=\"app\"]/nav/div/ul/li[@class=\"nav-item\"]/a[@href=\"#/login\"]')\n        # log_input_fields = WebDriverWait(driver, 5).until(EC.visibility_of_all_elements_located((By.TAG_NAME, 'input')))\n        login_data = []\n    \n        with open(\"login_data.txt\", \"r\") as log_file:\n            content = log_file.readlines()\n            for i in content:\n                login_data.append(i.replace(\"\\n\", \"\"))\n    \n        time.sleep(3)\n        email = WebDriverWait(driver, 10).until(EC.visibility_of_element_located(\n            (By.XPATH, '//*[@id=\"app\"]/div/div/div/div/form/fieldset[1]/input')))\n        pwd = WebDriverWait(driver, 10).until(EC.visibility_of_element_located(\n            (By.XPATH, '//*[@id=\"app\"]/div/div/div/div/form/fieldset[2]/input')))\n        sign_in_btn = WebDriverWait(driver, 10).until(EC.visibility_of_element_located(\n            (By.XPATH, '//button[contains(text(),\"Sign in\")]')))\n    \n        email.send_keys(login_data[1])\n        pwd.send_keys(login_data[2])\n        sign_in_btn.click()\n    \n        # driver.find_element_by_xpath('//form/fieldset/input[@placeholder=\"Email\"]').send_keys(login_data[1])\n        # driver.find_element_by_xpath('//form/fieldset/input[@placeholder=\"Password\"]').send_keys(login_data[2])\n        # find_elem_and_click('//button[contains(text(),\"Sign in\")]')\n    \n        # create new blog\n        time.sleep(5)\n        find_elem_and_click('//a[@href=\"#/editor\"]')  # editor\n        time.sleep(5)\n        form_input_fields = driver.find_elements_by_xpath('//form/fieldset//fieldset//input')\n        textarea = driver.find_element_by_tag_name('textarea')\n        publish_btn = driver.find_element_by_xpath('//form/button')\n        form_input_fields.insert(2, textarea)\n    \n        # fill in form input fields\n        random_blog_n = randint(1, 100)\n        test_dada = [f'Fest{random_blog_n}', f'Festival{random_blog_n}', \"THE BIGGEST DANCEHALL PARTY IN NYC, D.C. ATL IS \"\n                                                                         \"HEADED BACK TO LOS ANGELES\", \"quality\"]\n    \n        fill_input_fields(test_dada, form_input_fields, publish_btn)\n    \n        time.sleep(3)\n        h1_element = driver.find_element_by_xpath('//div[@class=\"container\"]/h1')\n        assert h1_element.text == test_dada[0]\n        time.sleep(5)\n        # edit\n        edit_btn = driver.find_element_by_xpath('//*[@id=\"app\"]/div/div[1]/div/div/span/a')\n        edit_btn.click()\n        mod_test_dada = [\"test modify\", \" Sun\", \"Sunny. Yesterday my life was fill the rain.\", \"sun\"]\n        time.sleep(5)\n    \n        def clear_fields(xp, my_list):\n            driver.find_element_by_xpath(xp).clear()\n            WebDriverWait(driver, 10).until(\n                EC.visibility_of_element_located((By.XPATH, xp)))\n            driver.find_element_by_xpath(xp).send_keys(my_list)\n    \n        clear_fields('//fieldset[1]/input', mod_test_dada[0])\n        clear_fields('//fieldset[2]/input', mod_test_dada[1])\n        clear_fields('//fieldset/fieldset[3]/textarea', mod_test_dada[2])\n        driver.find_element_by_xpath('//fieldset[4]/div/div/ul/li[1]/div[2]/i[2]').click()\n        driver.find_element_by_xpath('//fieldset/fieldset[4]/div/div/ul/li/input[@class=\"ti-new-tag-input ti-valid\"]')\\\n            .send_keys(mod_test_dada[3])\n        driver.find_element_by_xpath('//form/button').click()\n        time.sleep(5)\n    \n        # # check blog\n        assert h1_element.text == mod_test_dada[0]\n    \n        # A012_CON_TC14_Meglévő blogbejegyzésem törlése\n        time.sleep(3)\n        driver.find_element_by_xpath('//div/span/button[@class=\"btn btn-outline-danger btn-sm\"]').click()  # delete btn\n        # check delete blog in global feeds\n        time.sleep(3)\n        driver.find_element_by_xpath('//nav/div/ul/li/a[contains(text(), \"Home\")]').click()\n        global_feed_list = WebDriverWait(driver, 5).until(\n            EC.visibility_of_all_elements_located((By.XPATH, '//div[@class=\"home-global\"]//a[@class=\"preview-link\"]/h1')))\n        global_posts = []\n        all_pages_link = driver.find_elements_by_xpath('//nav/ul/li[@class=\"page-item\"]/a')\n        for link in all_pages_link:\n            global_feed_list = WebDriverWait(driver, 5).until(\n                EC.visibility_of_all_elements_located(\n                    (By.XPATH, '//div[@class=\"home-global\"]//a[@class=\"preview-link\"]/h1')))\n            create_text_list(global_feed_list, global_posts)\n            link.click()\n    \n        time.sleep(5)\n        assert not mod_test_dada[0] in global_posts\n    \n        # check delete blog in your feeds\n        driver.find_element_by_xpath('//div[@class=\"feed-toggle\"]/ul/li[1]/a[contains(text(), \"Your Feed\")]').click()\n        your_posts = []\n        your_feed_list = WebDriverWait(driver, 5).until(\n            EC.visibility_of_all_elements_located((By.XPATH, '//div[@class=\"home-my-feed\"]//a[@class=\"preview-link\"]/h1')))\n        all_pages_link = driver.find_elements_by_xpath('//nav/ul/li[@class=\"page-item\"]/a')\n    \n        for _ in all_pages_link:\n            your_feed_list = WebDriverWait(driver, 5).until(EC.visibility_of_all_elements_located(\n                (By.XPATH, '//div[@class=\"home-my-feed\"]//a[@class=\"preview-link\"]/h1')))\n>           create_text_list(your_feed_list, your_posts)\n\ntestproject/pytests/blog_post_test.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestproject/pytests/blog_post_test.py:35: in create_text_list\n    new_list.append(_.text)\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6a78a93f10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...age document\\\\n  (Session info: headless chrome=91.0.4472.164)\",\"stacktrace\":\"#0 0x5572c95f4949 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=91.0.4472.164)\n\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testproject.pytests"
  }, {
    "name" : "suite",
    "value" : "blog_post_test"
  }, {
    "name" : "host",
    "value" : "fv-az77-953"
  }, {
    "name" : "thread",
    "value" : "4242-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testproject.pytests.blog_post_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "cf1f17bbf8465245",
        "reportUrl" : "https://Bebe-ops.github.io/conduit/16//#testresult/cf1f17bbf8465245",
        "status" : "passed",
        "time" : {
          "start" : 1626980319866,
          "stop" : 1626980374632,
          "duration" : 54766
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6de0428a11906f47.json",
  "parameterValues" : [ ]
}